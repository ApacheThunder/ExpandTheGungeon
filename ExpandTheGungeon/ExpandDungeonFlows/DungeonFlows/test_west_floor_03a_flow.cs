using ExpandTheGungeon.ExpandPrefab;
using Dungeonator;
using System.Collections.Generic;
using UnityEngine;

namespace ExpandTheGungeon.ExpandDungeonFlows {

    public class test_west_floor_03a_flow : ExpandDungeonFlow {
        
        public static DungeonFlow TEST_West_Floor_03a_Flow() {

            DungeonFlow m_CachedFlow = ScriptableObject.CreateInstance<DungeonFlow>();

            DungeonFlowSubtypeRestriction TestSubTypeRestriction = new DungeonFlowSubtypeRestriction() {
                baseCategoryRestriction = PrototypeDungeonRoom.RoomCategory.NORMAL,
                normalSubcategoryRestriction = PrototypeDungeonRoom.RoomNormalSubCategory.TRAP,
                bossSubcategoryRestriction = PrototypeDungeonRoom.RoomBossSubCategory.FLOOR_BOSS,
                specialSubcategoryRestriction = PrototypeDungeonRoom.RoomSpecialSubCategory.UNSPECIFIED_SPECIAL,
                secretSubcategoryRestriction = PrototypeDungeonRoom.RoomSecretSubCategory.UNSPECIFIED_SECRET,
                maximumRoomsOfSubtype = 1
            };

            DungeonFlowNode TestNode_00 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.elevator_entrance,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                childNodeGuids = new List<string>() { "5160f844-ff79-4d19-b813-38496a344e8e" },
                loopTargetIsOneWay = false,
                guidAsString = "d9be71d3-8d97-48af-8eda-54aa897862be"            
            };
            DungeonFlowNode TestNode_01 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.boss_foyer,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "bd36ddc7-e687-4355-a69b-e799c9d857de",
                childNodeGuids = new List<string>() { "a0098d24-7733-4baf-82c0-11ce3e068261" },
                loopTargetIsOneWay = false,
                guidAsString = "036aafaf-a754-4410-94c5-2c4e5139a5bf"
            };
            DungeonFlowNode TestNode_02 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.oldbulletking_room_01,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "036aafaf-a754-4410-94c5-2c4e5139a5bf",
                childNodeGuids = new List<string>() { "f06e0430-437a-481e-9b34-604d145cc77d" },
                loopTargetIsOneWay = false,
                guidAsString = "a0098d24-7733-4baf-82c0-11ce3e068261"
            };
            DungeonFlowNode TestNode_03 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.exit_room_basic,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "a0098d24-7733-4baf-82c0-11ce3e068261",
                childNodeGuids = new List<string>(0),
                loopTargetIsOneWay = false,
                guidAsString = "f06e0430-437a-481e-9b34-604d145cc77d"
            };
            DungeonFlowNode TestNode_04 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "d9be71d3-8d97-48af-8eda-54aa897862be",
                childNodeGuids = new List<string>() { "0c8ee6c4-31b4-4226-9ddb-90c7eca8f2d3" },
                loopTargetIsOneWay = false,
                guidAsString = "5160f844-ff79-4d19-b813-38496a344e8e"
            };
            DungeonFlowNode TestNode_05 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "5160f844-ff79-4d19-b813-38496a344e8e",
                childNodeGuids = new List<string>() { "2439b6f0-b59e-4b46-8521-3195d72748f7" },
                loopTargetIsOneWay = false,
                guidAsString = "0c8ee6c4-31b4-4226-9ddb-90c7eca8f2d3"
            };
            DungeonFlowNode TestNode_06 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "2439b6f0-b59e-4b46-8521-3195d72748f7",
                childNodeGuids = new List<string>() { "989ad791-cfc8-4f4e-afc6-fd9512a789b7" },
                loopTargetIsOneWay = false,
                guidAsString = "a919a262-edf3-47e7-aae9-0eb77fa49262"
            };
            DungeonFlowNode TestNode_07 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "919a262-edf3-47e7-aae9-0eb77fa49262",
                childNodeGuids = new List<string>() { "b1da2e8a-afeb-41cc-8840-be1c46aa4401", "3a6325a4-d2c0-4b93-a82e-7f09b007e190" },
                loopTargetIsOneWay = false,
                guidAsString = "989ad791-cfc8-4f4e-afc6-fd9512a789b7"
            };
            DungeonFlowNode TestNode_08 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "8267eaa8-ed7f-403b-97a6-421d15a21ef3",
                childNodeGuids = new List<string>() { "3956174b-a5ee-4716-b021-889db041a070" },
                loopTargetIsOneWay = false,
                guidAsString = "8b4c640e-b835-4a6b-9326-7b11d856fcde"
            };
            DungeonFlowNode TestNode_09 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "8b4c640e-b835-4a6b-9326-7b11d856fcde",
                childNodeGuids = new List<string>() { "bd36ddc7-e687-4355-a69b-e799c9d857de", "31a9f731-24ba-49dd-9086-2f01cb3fcb1d" },
                loopTargetIsOneWay = false,
                guidAsString = "3956174b-a5ee-4716-b021-889db041a070"
            };
            DungeonFlowNode TestNode_10 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "3956174b-a5ee-4716-b021-889db041a070",
                childNodeGuids = new List<string>() { "036aafaf-a754-4410-94c5-2c4e5139a5bf", "17f291e0-37c3-4d03-ba6a-b5b534256c07" },
                loopTargetIsOneWay = false,
                guidAsString = "bd36ddc7-e687-4355-a69b-e799c9d857de"
            };
            DungeonFlowNode TestNode_11 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "0c8ee6c4-31b4-4226-9ddb-90c7eca8f2d3",
                childNodeGuids = new List<string>() { "dc3ba41b-dc99-42d3-ab9b-088991bc1741", "a919a262-edf3-47e7-aae9-0eb77fa49262" },
                loopTargetIsOneWay = false,
                guidAsString = "2439b6f0-b59e-4b46-8521-3195d72748f7"
            };
            DungeonFlowNode TestNode_12 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.gungeon_rewardroom_1,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "2439b6f0-b59e-4b46-8521-3195d72748f7",
                childNodeGuids = new List<string>() { "55ebfb7d-b617-4da1-853c-209d3bd36f8e" },
                loopTargetIsOneWay = false,
                guidAsString = "dc3ba41b-dc99-42d3-ab9b-088991bc1741"
            };
            DungeonFlowNode TestNode_13 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "dc3ba41b-dc99-42d3-ab9b-088991bc1741",
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = "0c8ee6c4-31b4-4226-9ddb-90c7eca8f2d3",
                loopTargetIsOneWay = false,
                guidAsString = "55ebfb7d-b617-4da1-853c-209d3bd36f8e"
            };
            DungeonFlowNode TestNode_14 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "8267eaa8-ed7f-403b-97a6-421d15a21ef3",
                childNodeGuids = new List<string>() { "44fc3013-6fa2-4436-a0db-1d3b99484703" },
                loopTargetIsOneWay = false,
                guidAsString = "0fbff154-f8cb-4367-a11f-16f5dd56fe4f"
            };
            DungeonFlowNode TestNode_15 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "989ad791-cfc8-4f4e-afc6-fd9512a789b7",
                childNodeGuids = new List<string>() { "8267eaa8-ed7f-403b-97a6-421d15a21ef3" },
                loopTargetIsOneWay = false,
                guidAsString = "b1da2e8a-afeb-41cc-8840-be1c46aa4401"
            };
            DungeonFlowNode TestNode_16 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.shop02,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "0fbff154-f8cb-4367-a11f-16f5dd56fe4f",
                childNodeGuids = new List<string>(0),
                loopTargetIsOneWay = false,
                guidAsString = "44fc3013-6fa2-4436-a0db-1d3b99484703"
            };
            DungeonFlowNode TestNode_17 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "bd36ddc7-e687-4355-a69b-e799c9d857de",
                childNodeGuids = new List<string>() { "56753489-2944-42ed-8c1f-c0daa03417b0" },
                loopTargetIsOneWay = false,
                guidAsString = "17f291e0-37c3-4d03-ba6a-b5b534256c07"
            };
            DungeonFlowNode TestNode_18 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "17f291e0-37c3-4d03-ba6a-b5b534256c07",
                childNodeGuids = new List<string>() { "1d489c84-f1b5-431d-bdf3-e61e74cd7f15", "3e0b1ce9-3862-4041-bfa9-bb82474e567a" },
                loopTargetIsOneWay = false,
                guidAsString = "56753489-2944-42ed-8c1f-c0daa03417b0"
            };
            DungeonFlowNode TestNode_19 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "56753489-2944-42ed-8c1f-c0daa03417b0",
                childNodeGuids = new List<string>() { "9fc6fab9-fe0f-458c-b1a4-e69077243acc" },
                loopTargetIsOneWay = false,
                guidAsString = "1d489c84-f1b5-431d-bdf3-e61e74cd7f15"
            };
            DungeonFlowNode TestNode_20 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.gungeon_rewardroom_1,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "1d489c84-f1b5-431d-bdf3-e61e74cd7f15",
                loopTargetNodeGuid = "bd36ddc7-e687-4355-a69b-e799c9d857de",
                loopTargetIsOneWay = true,
                guidAsString = "9fc6fab9-fe0f-458c-b1a4-e69077243acc"
            };
            DungeonFlowNode TestNode_21 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.HUB,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "b1da2e8a-afeb-41cc-8840-be1c46aa4401",
                childNodeGuids = new List<string>() { "0fbff154-f8cb-4367-a11f-16f5dd56fe4f", "8b4c640e-b835-4a6b-9326-7b11d856fcde" },
                loopTargetIsOneWay = false,
                guidAsString = "8267eaa8-ed7f-403b-97a6-421d15a21ef3"
            };
            DungeonFlowNode TestNode_22 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.SECRET,
                percentChance = 0.196999997f,
                priority = DungeonFlowNode.NodePriority.OPTIONAL,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "989ad791-cfc8-4f4e-afc6-fd9512a789b7",
                childNodeGuids = new List<string>(0),
                loopTargetIsOneWay = false,
                guidAsString = "3a6325a4-d2c0-4b93-a82e-7f09b007e190"
            };
            DungeonFlowNode TestNode_23 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.SECRET,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.OPTIONAL,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "3956174b-a5ee-4716-b021-889db041a070",
                childNodeGuids = new List<string>(0),
                loopTargetIsOneWay = false,
                guidAsString = "31a9f731-24ba-49dd-9086-2f01cb3fcb1d"
            };
            DungeonFlowNode TestNode_24 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.SECRET,
                percentChance = 0.291999996f,
                priority = DungeonFlowNode.NodePriority.OPTIONAL,
                capSubchain = false,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                subchainIdentifiers = new List<string>(0),
                chainRules = new List<ChainRule>(0),
                flow = m_CachedFlow,
                parentNodeGuid = "56753489-2944-42ed-8c1f-c0daa03417b0",
                childNodeGuids = new List<string>(0),
                loopTargetIsOneWay = false,
                guidAsString = "3e0b1ce9-3862-4041-bfa9-bb82474e567a"
            };
            m_CachedFlow.name = "TEST_West_Floor_03a_Flow";
            // m_CachedFlow.fallbackRoomTable = CatacombsPrefab.PatternSettings.flows[0].fallbackRoomTable;
            m_CachedFlow.fallbackRoomTable = ExpandPrefabs.CatacombsRoomTable;
            m_CachedFlow.subtypeRestrictions = new List<DungeonFlowSubtypeRestriction>() { TestSubTypeRestriction };
            m_CachedFlow.flowInjectionData = new List<ProceduralFlowModifierData>(0);
            m_CachedFlow.sharedInjectionData = new List<SharedInjectionData>(0);

            m_CachedFlow.Initialize();

            m_CachedFlow.AddNodeToFlow(TestNode_00, null);
            m_CachedFlow.AddNodeToFlow(TestNode_01, TestNode_10);
            m_CachedFlow.AddNodeToFlow(TestNode_02, TestNode_01);
            m_CachedFlow.AddNodeToFlow(TestNode_03, TestNode_02);
            m_CachedFlow.AddNodeToFlow(TestNode_04, TestNode_00);
            m_CachedFlow.AddNodeToFlow(TestNode_05, TestNode_04);
            m_CachedFlow.AddNodeToFlow(TestNode_06, TestNode_11);
            m_CachedFlow.AddNodeToFlow(TestNode_07, TestNode_06);
            m_CachedFlow.AddNodeToFlow(TestNode_08, TestNode_21);
            m_CachedFlow.AddNodeToFlow(TestNode_09, TestNode_08);
            m_CachedFlow.AddNodeToFlow(TestNode_10, TestNode_09);
            m_CachedFlow.AddNodeToFlow(TestNode_11, TestNode_05);
            m_CachedFlow.AddNodeToFlow(TestNode_12, TestNode_11);
            m_CachedFlow.AddNodeToFlow(TestNode_13, TestNode_12);
            m_CachedFlow.AddNodeToFlow(TestNode_14, TestNode_21);
            m_CachedFlow.AddNodeToFlow(TestNode_15, TestNode_07);
            m_CachedFlow.AddNodeToFlow(TestNode_16, TestNode_14);
            m_CachedFlow.AddNodeToFlow(TestNode_17, TestNode_10);
            m_CachedFlow.AddNodeToFlow(TestNode_18, TestNode_17);
            m_CachedFlow.AddNodeToFlow(TestNode_19, TestNode_18);
            m_CachedFlow.AddNodeToFlow(TestNode_20, TestNode_19);
            m_CachedFlow.AddNodeToFlow(TestNode_21, TestNode_15);
            m_CachedFlow.AddNodeToFlow(TestNode_22, TestNode_07);
            m_CachedFlow.AddNodeToFlow(TestNode_23, TestNode_09);
            m_CachedFlow.AddNodeToFlow(TestNode_24, TestNode_18);

            m_CachedFlow.LoopConnectNodes(TestNode_13, TestNode_05);
            m_CachedFlow.LoopConnectNodes(TestNode_20, TestNode_10);

            m_CachedFlow.FirstNode = TestNode_00;
            
            return m_CachedFlow;
        }
    }
}

