using Dungeonator;
using System;
using System.Collections.Generic;
using UnityEngine;
using ExpandTheGungeon.ExpandPrefab;


namespace ExpandTheGungeon.ExpandDungeonFlows {

    public class custom_glitch_flow {     

        public static DungeonFlow Custom_Glitch_Flow() {
            DungeonFlow m_CachedFlow = ScriptableObject.CreateInstance<DungeonFlow>();

            DungeonFlowNode GlitchFlowNode_00 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.ENTRANCE,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.tiny_entrance,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_01 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_02 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_03 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_04 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.HUB,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_05 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = true,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_06 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_07 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_08 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_09 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_10 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_11 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.boss_foyer,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_12 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.BOSS,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.doublebeholsterroom01,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            
            if (ExpandPrefabs.doublebeholstertable) {
                GlitchFlowNode_12.overrideRoomTable = ExpandPrefabs.doublebeholstertable;
            } else {
                GlitchFlowNode_12.overrideExactRoom = ExpandPrefabs.doublebeholsterroom01;
            }

            DungeonFlowNode GlitchFlowNode_13 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.EXIT,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.tiny_exit,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            // No Parent node?
            DungeonFlowNode GlitchFlowNode_14 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_15 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_16 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_17 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_18 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_19 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.REWARD,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.reward_room,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = true,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_20 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_21 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.HUB,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_22 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_23 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_24 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_25 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_26 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = true,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_27 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.CONNECTOR,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_28 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_29 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.REWARD,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = ExpandPrefabs.reward_room,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_30 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.NORMAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_31 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.SECRET,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = null,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };
            DungeonFlowNode GlitchFlowNode_32 = new DungeonFlowNode(m_CachedFlow) {
                isSubchainStandin = false,
                nodeType = DungeonFlowNode.ControlNodeType.ROOM,
                roomCategory = PrototypeDungeonRoom.RoomCategory.SPECIAL,
                percentChance = 1f,
                priority = DungeonFlowNode.NodePriority.MANDATORY,
                overrideExactRoom = null,
                overrideRoomTable = ExpandPrefabs.shop_room_table,
                capSubchain = false,
                subchainIdentifier = string.Empty,
                limitedCopiesOfSubchain = false,
                maxCopiesOfSubchain = 1,
                subchainIdentifiers = new List<string>(0),
                receivesCaps = false,
                isWarpWingEntrance = false,
                handlesOwnWarping = false,
                forcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                loopForcedDoorType = DungeonFlowNode.ForcedDoorType.NONE,
                nodeExpands = false,
                initialChainPrototype = "n",
                chainRules = new List<ChainRule>(0),
                minChainLength = 3,
                maxChainLength = 8,
                minChildrenToBuild = 1,
                maxChildrenToBuild = 1,
                canBuildDuplicateChildren = false,
                parentNodeGuid = string.Empty,
                childNodeGuids = new List<string>(0),
                loopTargetNodeGuid = string.Empty,
                loopTargetIsOneWay = false,
                guidAsString = Guid.NewGuid().ToString(),
                flow = m_CachedFlow,
            };


            m_CachedFlow.name = "Custom_Glitch_Flow";
            m_CachedFlow.fallbackRoomTable = ExpandPrefabs.CustomRoomTable2;
            m_CachedFlow.subtypeRestrictions = new List<DungeonFlowSubtypeRestriction>(0);
            m_CachedFlow.flowInjectionData = new List<ProceduralFlowModifierData>(0);
            m_CachedFlow.sharedInjectionData = new List<SharedInjectionData>(0);
            
            m_CachedFlow.Initialize();

            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_00, null);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_01, GlitchFlowNode_30);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_02, GlitchFlowNode_01);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_03, GlitchFlowNode_02);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_04, GlitchFlowNode_03);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_05, GlitchFlowNode_07);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_06, GlitchFlowNode_04);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_07, GlitchFlowNode_05);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_08, GlitchFlowNode_09);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_09, GlitchFlowNode_04);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_10, GlitchFlowNode_06);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_11, GlitchFlowNode_10);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_12, GlitchFlowNode_11);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_13, GlitchFlowNode_12);

            // Orphaned Chain. Fix Later
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_14, null);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_15, GlitchFlowNode_14);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_16, GlitchFlowNode_15);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_17, GlitchFlowNode_16);

            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_18, GlitchFlowNode_10);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_19, GlitchFlowNode_18);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_20, GlitchFlowNode_00);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_21, GlitchFlowNode_20);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_22, GlitchFlowNode_23);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_23, GlitchFlowNode_24);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_24, GlitchFlowNode_25);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_25, GlitchFlowNode_21);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_26, GlitchFlowNode_21);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_27, GlitchFlowNode_26);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_28, GlitchFlowNode_27);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_29, GlitchFlowNode_28);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_30, GlitchFlowNode_24);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_31, GlitchFlowNode_01);
            m_CachedFlow.AddNodeToFlow(GlitchFlowNode_32, GlitchFlowNode_22);

            m_CachedFlow.LoopConnectNodes(GlitchFlowNode_05, GlitchFlowNode_09);
            m_CachedFlow.LoopConnectNodes(GlitchFlowNode_19, GlitchFlowNode_04);
            m_CachedFlow.LoopConnectNodes(GlitchFlowNode_26, GlitchFlowNode_29);

            m_CachedFlow.FirstNode = GlitchFlowNode_00;

            return m_CachedFlow;
        }
    }
}

